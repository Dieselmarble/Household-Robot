<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.025" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="3.0" />

		<!-- <param name="filter_ground" type="bool" value="true" />
		<param name="ground_filter/distance" value="0.5" /-->
		<param name="base_frame_id" type="string" value="base_link" /> 
		<param name="pointcloud_min_z" value="0.04" />
		<param name="pointcloud_max_z" value="1.78" />
		<param name="height_map" value="true" />
		<param name="colored_map" value="false" />



		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/cam_2/depth/color/points/filtered" />
	
	</node>
	<!-- <node pkg="tf" type="static_transform_publisher" name="octo_tf" args="0.0 0.0 0.0 0 0 0.0 /map /odom 1000"/> -->
</launch>